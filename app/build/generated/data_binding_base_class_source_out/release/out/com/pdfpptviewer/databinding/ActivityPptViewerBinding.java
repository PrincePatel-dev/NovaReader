// Generated by view binder compiler. Do not edit!
package com.pdfpptviewer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.pdfpptviewer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPptViewerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout controlsLayout;

  @NonNull
  public final MaterialButton nextButton;

  @NonNull
  public final MaterialButton prevButton;

  @NonNull
  public final ConstraintLayout rootLayout;

  @NonNull
  public final TextView slideContentText;

  @NonNull
  public final TextView slideInfoText;

  @NonNull
  public final ScrollView slideScrollView;

  private ActivityPptViewerBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout controlsLayout, @NonNull MaterialButton nextButton,
      @NonNull MaterialButton prevButton, @NonNull ConstraintLayout rootLayout,
      @NonNull TextView slideContentText, @NonNull TextView slideInfoText,
      @NonNull ScrollView slideScrollView) {
    this.rootView = rootView;
    this.controlsLayout = controlsLayout;
    this.nextButton = nextButton;
    this.prevButton = prevButton;
    this.rootLayout = rootLayout;
    this.slideContentText = slideContentText;
    this.slideInfoText = slideInfoText;
    this.slideScrollView = slideScrollView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPptViewerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPptViewerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_ppt_viewer, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPptViewerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.controlsLayout;
      LinearLayout controlsLayout = ViewBindings.findChildViewById(rootView, id);
      if (controlsLayout == null) {
        break missingId;
      }

      id = R.id.nextButton;
      MaterialButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.prevButton;
      MaterialButton prevButton = ViewBindings.findChildViewById(rootView, id);
      if (prevButton == null) {
        break missingId;
      }

      ConstraintLayout rootLayout = (ConstraintLayout) rootView;

      id = R.id.slideContentText;
      TextView slideContentText = ViewBindings.findChildViewById(rootView, id);
      if (slideContentText == null) {
        break missingId;
      }

      id = R.id.slideInfoText;
      TextView slideInfoText = ViewBindings.findChildViewById(rootView, id);
      if (slideInfoText == null) {
        break missingId;
      }

      id = R.id.slideScrollView;
      ScrollView slideScrollView = ViewBindings.findChildViewById(rootView, id);
      if (slideScrollView == null) {
        break missingId;
      }

      return new ActivityPptViewerBinding((ConstraintLayout) rootView, controlsLayout, nextButton,
          prevButton, rootLayout, slideContentText, slideInfoText, slideScrollView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
